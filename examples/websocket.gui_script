local websocket_async = require "websocket.client_async"

local function click_button(node, action)
	return gui.is_enabled(node) and action.released and gui.pick_node(node, action.x, action.y)
end

local function update_buttons(self)
	if self.ws then
		gui.set_enabled(self.connect_ws_node, false)
		gui.set_enabled(self.connect_wss_node, false)
		gui.set_enabled(self.send_node, true)
		gui.set_enabled(self.close_node, true)
	else
		gui.set_enabled(self.connect_ws_node, true)
		gui.set_enabled(self.connect_wss_node, true)
		gui.set_enabled(self.send_node, false)
		gui.set_enabled(self.close_node, false)
	end
end

local function log(...)
	local text = ""
	local len = select("#", ...)
	for i=1,len  do
		text = text .. tostring(select(i, ...)) .. (i == len and "" or ", ")
	end
	
	print(text)
	local node = gui.get_node("log")
	gui.set_text(node, gui.get_text(node) .. "\n" .. text)
end

function init(self)
	msg.post(".", "acquire_input_focus")
	msg.post("@render:", "clear_color", { color = vmath.vector4(0.2, 0.4, 0.8, 1.0) })
	self.connect_ws_node = gui.get_node("connect_ws/button")
	self.connect_wss_node = gui.get_node("connect_wss/button")
	self.send_node = gui.get_node("send/button")
	self.close_node = gui.get_node("close/button")
	update_buttons(self)
end

function final(self)
	msg.post(".", "release_input_focus")
end

function update(self, dt)
	if self.ws then
		self.ws.step()
	end
end

local function connect(self, protocol)
	log("Creating async websocket")
	self.ws = websocket_async()
	self.ws:on_message(function(message)
		log("Receiving: '" .. tostring(message) .. "'")
	end)
	self.ws:on_connected(function(ok, err)
		log("Connected", ok, err, type(err))
		if err then
			log("on_connected error", err)
			self.ws:close()
			self.ws = nil
		end
		update_buttons(self)
	end)
	self.ws:on_disconnected(function()
		log("Disconnected")
		self.ws = nil
		update_buttons(self)
	end)

	local url = nil
	local sslparams =  nil
	if protocol == "ws" then
		url = "ws://echo.websocket.org"
		--url = "ws://localhost:9999"
	else
		sslparams = {
			mode = "client",
			protocol = "tlsv1_2",
			verify = "none",
			options = "all",
		}
		url = "wss://echo.websocket.org"
	end

	log("Connecting to " .. url)
	self.ws:connect(url, protocol, sslparams)
end

function on_input(self, action_id, action)
	if click_button(self.connect_ws_node, action) then
		connect(self, "ws")
	elseif click_button(self.connect_wss_node, action) then
		connect(self, "wss")
	elseif click_button(gui.get_node("send/button"), action) then
		local message_to_send = 'sending to server'
		local ok, was_clean, code, reason = self.ws:send(message_to_send)
		log("Sending '" .. message_to_send .. "'", ok, was_clean, code, reason)
	elseif click_button(gui.get_node("close/button"), action) then
		log("Closing")
		self.ws:close()
	end
end
